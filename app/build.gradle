plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.compose)
    id("com.google.devtools.ksp")
    id("com.google.dagger.hilt.android")
}

android {
    namespace 'com.weather.forecast'
    compileSdk 35

    defaultConfig {
        applicationId "com.weather.forecast"
        minSdk 24
        targetSdk 35
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            buildConfigField "String", "API_KEY", "\"${getPropertyFromLocalProperties("API_KEY")}\""
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "API_KEY", "\"${getPropertyFromLocalProperties("API_KEY")}\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
        buildConfig true
    }
}

dependencies {

    implementation libs.androidx.core.ktx
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.activity.compose
    implementation libs.androidx.navigation.compose
    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.ui
    implementation libs.androidx.material
    implementation libs.androidx.ui.graphics
    implementation libs.androidx.ui.tooling.preview
    implementation libs.androidx.material3
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation platform(libs.androidx.compose.bom)
    androidTestImplementation libs.androidx.ui.test.junit4
    debugImplementation libs.androidx.ui.tooling
    debugImplementation libs.androidx.ui.test.manifest

    // Hilt dependencies
    implementation libs.dagger.hilt.android
    implementation libs.androidx.hilt.navigation.compose
    ksp libs.dagger.hilt.compiler
    ksp libs.androidx.hilt.compiler

    // Coroutine dependencies
    implementation libs.kotlinx.coroutines.core
    implementation libs.kotlinx.coroutines.android

    // Network
    implementation libs.retrofit
    implementation libs.okhttp
    implementation libs.logging.interceptor
    implementation libs.retrofit.gson.converter
    implementation libs.timber

    // Coil
    implementation libs.coil.compose
    implementation libs.coil.network.okhttp
}

// 通用方法，用于从 local.properties 中读取指定的键
def getPropertyFromLocalProperties(key, defaultValue = "") {
    def propertiesFile = rootProject.file("local.properties")
    if (propertiesFile.exists()) {
        def properties = new Properties()
        properties.load(new FileInputStream(propertiesFile))
        return properties.getProperty(key, defaultValue)
    } else {
        throw new GradleException("local.properties file not found or missing $key")
    }
}