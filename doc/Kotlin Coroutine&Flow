http://8.136.122.222/book/middle/week2/kotlin_coroutine.html
http://8.136.122.222/book/middle/week2/flow.html

StateFlow 和 SharedFlow 的区别：StateFlow 只保留最新值，SharedFlow 根据配置可以保留历史数据

// 进入页面回调
SideEffect {

}

// 加强版的 SideEffect，进入页面回调 + 离开页面回调
DisposableEffect(Unit) {
    println("进入页面了")
    onDispose {
        println("离开页面了")
    }
}

// 与 DisposableEffect 同源，特殊场景：专门面对协程；协程版本的 DisposableEffect
// 需求基于协程用 LaunchedEffect，否则用 DisposableEffect
LaunchedEffect()

@Composable
fun CustomLaunchedEffect(welcome: String) {
    var rememberWelcome by remember { mutableStateOf(welcome) }
    rememberWelcome = welcome
    // 稍后使用变量的场景，不触发重启，也需要监听最新值；DisposableEffect 也是同理
    LaunchedEffect(Unit) {
        delay(3000)
        println("@@= $rememberWelcome")
    }
}
// 使用 remember 跨越多次重组，简化的独立函数
rememberUpdatedState()
val rememberWelcome by rememberUpdatedState(welcome)

// 协程的另一种方式，用途是可以在被点击的 clickable 中启动协程
val scope = rememberCoroutineScope()
remember {
    // 反正重组时反复调用
    scope.launch {  }
}
lifecycleScope.launch{} 在 Compose 中不能用，因为不能使用 Activity 的 CoroutineScope

// 协程和其他状态向 Compose 状态的转换
produceState(initialValue, producer)
// 少用liveData，多用flow；liveData 转 State，每次把 liveData 最新值推给 State
val positionStateFromLiveData = liveData.observeAsState()

val positionState: StateFlow<Point> = xxx
var position by remember { mutableStateOf(Point(0, 0)) }
LaunchedEffect() {
    positionState.collect { newPos ->
        position = newPos
    }
}
val positionStateFromFlow = positionState.collectAsState()

// 和上面用 LaunchedEffect 的写法作用一样，在协程里面更新 State 值
val producedState = produceState(initialValue = Point(0, 0)) {
    positionState.collect { newPos ->
        value = newPos
    }
}

var name by remember { mutableStateOf("xxx") }
var age by remember { mutableStateOf("xxx") }
// 用于将 Compose 的 State 转化为 Kotlin 的 Flow
val flow = snapshotFlow { "$name $age" }
LaunchedEffect() {
    flow.collect { info ->
        println(info)
    }
}
